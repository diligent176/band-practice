name: Terraform Infrastructure

on:
  push:
    branches:
      - main
    paths:
      - "terraform/**"
  pull_request:
    paths:
      - "terraform/**"
  workflow_dispatch:

jobs:
  terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Create terraform.tfvars from secrets
        run: |
          cat > terraform.tfvars <<EOF
          allowed_user_emails     = ${{ secrets.ALLOWED_USER_EMAILS }}
          firebase_api_key        = "${{ secrets.FIREBASE_API_KEY }}"
          firestore_location      = "${{ secrets.FIRESTORE_LOCATION }}"
          flask_secret_key        = "${{ secrets.FLASK_SECRET_KEY }}"
          project_id              = "${{ secrets.GCP_PROJECT_ID }}"
          region                  = "${{ secrets.GCP_REGION }}"
          genius_access_token     = "${{ secrets.GENIUS_ACCESS_TOKEN }}"
          getsongbpm_api_key      = "${{ secrets.GETSONGBPM_API_KEY }}"
          scraper_api_key         = "${{ secrets.SCRAPER_API_KEY }}"
          spotify_client_id       = "${{ secrets.SPOTIFY_CLIENT_ID }}"
          spotify_client_secret   = "${{ secrets.SPOTIFY_CLIENT_SECRET }}"
          spotify_playlist_url    = "${{ secrets.SPOTIFY_PLAYLIST_URL }}"
          custom_domain           = "${{ vars.TF_VAR_CUSTOM_DOMAIN }}"
          EOF
          terraform fmt terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Plan ğŸ“‹

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve tfplan
