name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main
    paths:
      - "webapp/**"
      - "Dockerfile"
      - "requirements.txt"
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION }}
  SERVICE_NAME: band-practice-pro
  GAR_LOCATION: us-west1
  REPOSITORY: band-practice-pro

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest \
            .

      - name: Push Docker image to Artifact Registry
        run: |
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --update-env-vars="GCP_PROJECT_ID=${{ env.PROJECT_ID }},SPOTIFY_PLAYLIST_URL=${{ secrets.SPOTIFY_PLAYLIST_URL }},FIREBASE_AUTH_DOMAIN=${{ env.PROJECT_ID }}.firebaseapp.com,FIREBASE_PROJECT_ID=${{ env.PROJECT_ID }}" \
            --update-secrets="SPOTIFY_CLIENT_ID=SPOTIFY_CLIENT_ID:latest,SPOTIFY_CLIENT_SECRET=SPOTIFY_CLIENT_SECRET:latest,GENIUS_ACCESS_TOKEN=GENIUS_ACCESS_TOKEN:latest,SECRET_KEY=SECRET_KEY:latest,FIREBASE_API_KEY=FIREBASE_API_KEY:latest,ALLOWED_USERS=ALLOWED_USERS:latest,SCRAPER_API_KEY=SCRAPER_API_KEY:latest,GETSONGBPM_API_KEY=GETSONGBPM_API_KEY:latest"

      - name: Show deployment URL
        run: |
          echo "Deployment complete!"
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --format='value(status.url)'

      - name: Cleanup old images
        run: |
          # List all image digests (excluding 'latest' tag), sort by creation time, and keep only the 3 most recent
          gcloud artifacts docker images list \
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }} \
            --format="get(version)" \
            --sort-by="~CREATE_TIME" \
            --filter="NOT tags:latest" | tail -n +4 | while read digest; do
              echo "Deleting old image: $digest"
              gcloud artifacts docker images delete \
                "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}@$digest" \
                --quiet --delete-tags
            done || echo "No old images to delete"
